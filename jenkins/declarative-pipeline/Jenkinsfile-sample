pipeline {
	agent any
	tools {
		// TODO: how to make this parametrizable?
		jdk "jdk8"
	}
	stages {
		stage("Build and Upload") {
			steps {
				checkout([
					$class: 'GitSCM',
					clearWorkspace: true,
					branches: [
						[name: "*/${env.GIT_BRANCH_NAME ?: 'master'}"]
					],
					extensions: [
						[$class: 'WipeWorkspace'],
					],
					userRemoteConfigs: [
						[credentialsId: Boolean.parseBoolean(env.GIT_USE_SSH_KEY) == Boolean.TRUE ?
							env.GIT_SSH_CREDENTIAL_ID : env.GIT_CREDENTIAL_ID, url: env.GIT_REPOSITORY]
					]
				])

				checkout([
					$class: 'GitSCM',
					branches: [
						[name: "*/${env.TOOLS_BRANCH}"]
					],
					extensions: [
						[$class: 'WipeWorkspace'],
						[$class: 'RelativeTargetDirectory', relativeTargetDir: "${env.WORKSPACE}@tools"]
					],
					userRemoteConfigs: [
						[credentialsId: env.GIT_CREDENTIAL_ID, url: env.TOOLS_REPOSITORY]
					]
				])

				script {
					if (!env.PIPELINE_VERSION) {
						env.PIPELINE_VERSION = VersionNumber(
							versionNumberString: env.PIPELINE_VERSION_FORMAT ?: '${BUILD_DATE_FORMATTED, \"yyMMdd_HHmmss\"}-VERSION',
							versionPrefix: env.PIPELINE_VERSION_PREFIX ?: '1.0.0.M1-'
						)
					}

					if (env.REPO_WITH_BINARIES_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.REPO_WITH_BINARIES_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.M2_SETTINGS_REPO_USERNAME = USER
							env.M2_SETTINGS_REPO_PASSWORD = PASS
						}
					}

					// remove::start[CF]
					if (env.PAAS_TEST_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.PAAS_TEST_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.PAAS_TEST_USERNAME = USER
							env.PAAS_TEST_PASSWORD = PASS
						}
					}

					if (env.PAAS_STAGE_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.PAAS_STAGE_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.PAAS_STAGE_USERNAME = USER
							env.PAAS_STAGE_PASSWORD = PASS
						}
					}

					if (env.PAAS_PROD_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.PAAS_PROD_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.PAAS_PROD_USERNAME = USER
							env.PAAS_PROD_PASSWORD = PASS
						}
					}
					// remove::end[CF]

					if (env.GIT_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.GIT_USERNAME = USER
							env.GIT_PASSWORD = PASS
						}
					}

					// remove::start[K8S]
					if (env.DOCKER_REGISTRY_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.DOCKER_REGISTRY_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.DOCKER_USERNAME = USER
							env.DOCKER_PASSWORD = PASS
						}
					}
					if (env.MYSQL_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.MYSQL_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.MYSQL_USER = USER
							env.MYSQL_PASSWORD = PASS
						}
					}

					if (env.MYSQL_ROOT_CREDENTIAL_ID) {
						withCredentials([usernamePassword(credentialsId: env.MYSQL_ROOT_CREDENTIAL_ID, passwordVariable: 'PASS', usernameVariable: 'USER')]) {
							env.MYSQL_ROOT_USER = USER
							env.MYSQL_ROOT_PASSWORD = PASS
						}
					}
					// remove::end[K8S]

					env.DEPLOY_TO_PROD = input message: '', parameters: [
						choice(
							name: 'Deploy to prod?',
							choices: 'no\nyes',
							description: 'Choose "yes" if you want to deploy this build to production'
						)
					]
				}
				sh """#!/bin/bash
				${
					if (Boolean.parseBoolean(env.GIT_USE_SSH_KEY) == Boolean.TRUE) {
						return """
						eval "\$(ssh-agent -s)"
						ssh-add /usr/share/jenkins/gitsshkey
						"""
					}	
				}
				\${WORKSPACE}@tools/common/src/main/bash/build_and_upload.sh
				"""
			}
		}

		stage("API compatibility check") {
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/build_api_compatibility_check.sh
				'''
			}
		}

		stage("Deploy to test") {
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/test_deploy.sh
				'''
			}
		}

		stage("Tests on test") {
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/test_smoke.sh
				'''
			}
		}

		stage("Deploy to test latest prod version") {
			when {
				environment name: 'DB_ROLLBACK_STEP_REQUIRED',
					value: 'true'
			}
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/test_rollback_deploy.sh
				'''
			}
		}

		stage("Tests on test latest prod version") {
			when {
				environment name: 'DB_ROLLBACK_STEP_REQUIRED',
					value: 'true'
			}
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/test_rollback_smoke.sh
				'''
			}
		}

		stage("Deploy to stage") {
			when {
				environment name: 'DEPLOY_TO_STAGE_STEP_REQUIRED',
					value: 'true'
			}
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/stage_deploy.sh
				'''
			}
		}

		stage("End to end tests on stage") {
			when {
				environment name: 'DEPLOY_TO_STAGE_STEP_REQUIRED',
					value: 'true'
			}
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/stage_e2e.sh
				'''
			}
		}

		stage("Deploy to prod") {
			when {
				environment name: 'DEPLOY_TO_PROD',
				value: 'yes'
			}
			steps {
				sh """
					${
						if (Boolean.parseBoolean(env.GIT_USE_SSH_KEY) == Boolean.TRUE) {
							return """
							eval "\$(ssh-agent -s)"
							ssh-add /usr/share/jenkins/gitsshkey
							"""
						} else {
							return """
							# https://issues.jenkins-ci.org/browse/JENKINS-28335
							git config --local credential.helper cache
							echo 'protocol=https\nhost=github.com\nusername=${GIT_USERNAME}\npassword=${GIT_PASSWORD}\n\n' | git credential approve
							"""
						}
					}
					git tag prod/\${PIPELINE_VERSION}
					git push --tags
					"""

				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/prod_deploy.sh
				'''
			}
		}

		stage("Complete switch over") {
			when {
				environment name: 'DEPLOY_TO_PROD',
				value: 'yes'
			}
			steps {
				sh '''#!/bin/bash
				${WORKSPACE}@tools/common/src/main/bash/prod_complete.sh
				'''
			}
		}
	}
	post {
		always {
			junit '**/surefire-reports/*.xml,**/test-results/**/*.xml'
			archive "**/build/**/k8s/*.yml"
			archive "**/target/**/k8s/*.yml"
		}
	}
}
